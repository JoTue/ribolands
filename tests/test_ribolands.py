# Build a ribolandscape based on different models and try the different algorithms.
import unittest
import math
import matplotlib.pyplot as plt
import networkx as nx
from itertools import product, combinations, permutations
import RNA

from ribolands import RiboLandscape, PrimePathLandscape
from ribolands.parser import parse_barriers
from ribolands.pathfinder import clear_fpath_cache

A = """
    AAAGCCGCCUUAAGCCUACUUAGAUGGAAGUGACGUACGGGUAUUGGUACACGAUUUUAC
    ....(((.((.(((....))))).)))((((...((((........))))...))))...
    ................(((((......)))))..((((........))))..........
    ....(((.((.(((....))))).)))((((...((((........))))...))))...
    ...(((((((..(...((((........))))...)..))))...)))............
    ........(((.(.((((((((........))).))).)).))..)).............
    ....(((.(.((((....))))).)))((((...((((.(....).))))...))))...
    ....(((...((((....))))..))).......((((........))))..........
    ....(((...((((....))))..)))..((((.((((.(....).))))......))))
    ......((((......(((((......)))))......))))..((.....)).......
    ........((.(((....)))))...(((((...((((.(....).))))...)))))..
    ....((..((...((.(((((......)))))..))...))....)).............
    ....(((.(.((((....))))).))).......((((........))))..........
    ...((........))...(......)........((((.(....).))))..........
    ....(((.(.((((....))))).))).(((...((((........))))...)))....
    ...((((((....((.(((((......)))))..))...)))...)))............
    ....((...(((((....)))))..)).......((((........))))..........
    ...(((((((......(((((......)))))......))))...)))............
    ((((.((......(((.((((..(((.......)))..))))...)))...)).))))..
    ...((((((.((....(((((......)))))...)).))....))))............
    ....(((.((.(((....))))).)))((((...((((.(....).))))...))))...
    ...(((((((...((.(((((......)))))..))..)))...))))............
    ....(((..(((((....))))).)))((((...((((.(....).))))...))))...
    ...(((((((...((..((((......))))...))..))))...)))............
    ....(((.((.(((....))))).)))((((..(((((.(....).))))..)))))...
    ....((((..((((....))))).))).(((...((((........))))...)))....
    ...(((((((...((.(((((......)))))..))..))))...)))............
    ....((...(((((....)))))..)).......((((........))))..........
    .....((.((.(((....))))).))(((((...((((........))))...)))))..
    ....(((.(.((((....))))).))).......((((........))))..........
    .......(((...(.(..((.....))..)...)....)))...((...)).........
    ....(((.((..((....)).)).)))..((...((((........))))...)).....
    ....(((.(.((((....))))).))).(((...((((.(....).))))...)))....
    ....(((.((.(((....))))).))).(((...((((........))))...)))....
    .......(((((((....)))))..))((((...((((........))))...))))...
    .......(((((((....)))))..)).......((((.(....).))))..........
    .........(((((....)))))...(((((...((((........))))...)))))..
    ....((....((((....))))...)).......((((........))))..........
    ....((..((.(((....)))))..))((((...((((........))))...))))...
    ......(((.......(((((..(((.......)))..)))))..)))............
    ....(((...((((....))))..))).(((...((((........))))...)))....
    ....(((.((.(((....))))).)))..((...((((.(....).))))))........
    ....(((..(((((....))))).)))..((((.((.((.(((....))).)))).))))
    ...(((((((...((.((((........))))..))..))))...)))............
    ....(((.((.(((....))))).)))..(((...(((.(....).))))))........
    ....(((.((.(((....))))).))).......((((.(....).))))..........
    ......((((......(((((......)))))......))))((((.....)))).....
    ......((.....)).(((((......)))))..((((.(....).))))..........
    ......(((....(((((((((........))).))..))))...)))............
    ...(((((((...((.((((........))))..))..))))...)))............
    .....(((......((.........))..)))..((((........))))..........
    ....(((..(((((....))))).)))..(((((............)).)))(......)
    ...(((((((...((.(((((......)))))..))..))))...)))............
    ......(((.....((((((((........))).))).)).....)))............
    ...(((((((...(.(.(((........)))).)....)))...))))............
    ....(((.(.((((....))))).)))..(....((((........)))).)........
    ...(((((((..(...(((((......)))))...)..))))...)))............
    ...(((((((...(.(..(((......))).).)....)))...))))............
    ...(((((((...(..(((((......))))).)....))))...)))............
    ....(((..(((((....))))).)))((((...((((........))))...))))...
    ....(((.(.((((....))))).)))((((...((((........))))...))))...
    ....(((...((((....))))..))).(((...((((........))))...)))....
    .(((.(((.....)).(((((......)))))..((((.(....).))))..).)))...
    .......((.....((((((((........))).))).)).....)).............
    .......(((((((....)))))..)).(((...((((........))))...)))....
    ....(((..(((((....))))).))).......((((........))))..........
    .........(((((....))))).((((.(((...(((.(....).))))))...)))).
    ....(((.(.((((....))))).))).......((((........))))..........
    ...(((((((...(..(((((......))))).)....))))...)))............
    ...(((((((((.(..(((((......))))).).)).))))...)))............
    ....(((.(.((((....))))).)))..((...((((........))))...)).....
    .....((.(.((((....))))).))(((((...((((........))))...)))))..
    ...(((((((...(..(((((......)))))...)..))))...)))............
    ....(((.(.((((....))))).))).(((...((((........))))...)))....
    ...(((((((...((.((((........))))..))..))))...)))............
    ................(((((......)))))..((((.(....).))))..........
    ...(((((((...((.(((((......)))))..))..))))...)))............
    ....(((.(.((((....))))).))).......((((........))))..........
    ........(((..(.((....)).)..)))....((((........))))..........
    ...(((((((((.(..(((((......))))).).)).))))...)))............
    ....(((.((.(((....))))).)))((((...((((.(....).))))...))))...
    ....(((.((.(((....))))).))).......((((........))))..........
    ....(((.((.(((....))))).)))((((...((((........))))...))))...
    ...(((((((...((.(((((......)))))..))..))))...)))............
    ...((((.........(((((..(((.......)))..))))).))))............
    .....((......(((.((((..(((.......)))..))))...)))...)).......
    ....(((.((.(((....))))).)))((((...((((........))))...))))...
    ...(((((((.......(((........))).......))))...)))............
    ......(((....((((((((......))))).......)))...)))............
    ...(((((((...(.(.((((......))))).)....))))...)))............
    ...(((((((......(((((......)))))......))))...)))............
    ......((((......(((((......)))))......))))....((.....)).....
    ....(((.((.(((....))))).))).(((...((((........))))...)))....
    ...(((.(((((....(((((......)))))...)).)))....)))............
    ...(((((((......(((((......)))))......))))...)))............
    ....(((.((.(((....))))).))).......((((........))))..........
    ......(((....((((((((......))))).......)))...)))............
    ...(((((((......(((((......)))))......))))...)))............
    ...(((((((...(..(((((......))))).)....))))...)))............
    ....(((.(.((((....))))).)))..(((...(((........))))))........
    ....(((.(.((((....))))).)))((((...((((.(....).))))...))))...
""".split()

class TestRiboLandscape(unittest.TestCase):
    """
    Testing:

    A) Basic functions of RiboLandscape

        -) adding secondary structures (local minima)

    B) Rate model fitness (not a unittest....)

    """

    def setUp(self):
        pass

    def tearDown(self):
        clear_fpath_cache()

    def test_addnodes(self):
        vrna_md = RNA.md()
        vrna_md.temperature = 25
        seq = "AAAGCCGCCUUAAGCCUACUUAGAUGGAAGUGACGUACGGGUAUUGGUACACGAUUUUAC"
        RL = PrimePathLandscape(seq, vrna_md)
        RL.addnode('foo')
        assert RL.nodes['foo']['structure'] is None
        assert RL.nodes['foo']['energy'] is None
        assert RL.nodes['foo']['identity'] == 0

        ss = '....(((.((.(((....))))).)))((((...((((........))))...))))...' 
        en = -10.94
        RL.addnode('bar', structure = ss)
        assert RL.nodes['bar']['structure'] == ss
        assert RL.nodes['bar']['energy'] == en
        assert RL.nodes['bar']['identity'] == 1
        assert RL.nodes['bar']['active'] is None
        assert RL.nodes['bar']['occupancy'] == 0

        ss = '....(((.((.(((....))))).)))((((...((((........))))...))))...' 
        en = -10.94
        with self.assertRaises(AssertionError) as e:
            RL.addnode('hello', structure = ss, energy = '-9')
        with self.assertRaises(AssertionError) as e:
            RL.addnode('hello', structure = ss, energy = -9)

        RL.addnode(ss, structure = ss, energy = -9.0)
        assert RL.nodes[ss]['structure'] == ss
        assert RL.nodes[ss]['energy'] == -9.0
        assert RL.nodes[ss]['identity'] == 2
        assert RL.nodes[ss]['active'] is None
        assert RL.nodes[ss]['occupancy'] == 0

        RL.addnode(ss, structure = ss, energy = en, mynewatt = 15)
        assert RL.nodes[ss]['structure'] == ss
        assert RL.nodes[ss]['energy'] == en
        assert RL.nodes[ss]['identity'] == 3
        assert RL.nodes[ss]['active'] is None
        assert RL.nodes[ss]['occupancy'] == 0
        assert RL.nodes[ss]['mynewatt'] == 15


    # Compare with:
    # 1) Read a bunch of random structures.
    # or
    # 1) Read a subset of local minima.
    # or
    # 2) apply local flooding procedure to path minima.

    def test_PrimePathFlodding_Nr1(self):
        # 1) Read a bunch of local minima.
        # 2) Connect them with direct_prime_path_flooding:
        # 3) Coarse grain the network.
        # EXP: 2nd iteration of the algo should not yield new results.
        # 4) Look at dynamics when starting at different points
        # 5) Reduce to minimal network and rerun the dynamics.

        # only 2 and 3 make a good test for permutations.
       
        btree = """ # A barrier tree: minh = 3, max = 30, temperature = 25
            AAAGCCGCCUUAAGCCUACUUAGAUGGAAGUGACGUACGGGUAUUGGUACACGAUUUUAC
         # 1 ....(((.(.((((....))))).)))((((...((((........))))...))))... -10.94    0  12.00
         # 2 ....(((.((.(((....))))).)))((((...((((........))))...))))... -10.94    1   3.11
         # 3 ...(((((((......(((((......)))))......))))...)))............ -10.86    1   8.12
         # 4 ....(((.(.((((....))))).))).......((((........)))).......... -10.76    1   3.49
         # 5 ....(((.((.(((....))))).))).......((((........)))).......... -10.76    4   3.11
         # 6 ....(((.(.((((....))))).)))..((((.((.((.(((....))).)))).)))) -10.56    1   7.66
         # 7 ....(((.((.(((....))))).)))..((((.((.((.(((....))).)))).)))) -10.56    6   3.11
         # 8 ......(((...(.((((((((........))).))).)).)...)))............ -10.24    1   9.03
         # 9 .............((((((((..(((.......)))..)))))..)))............ -10.23    1   9.61
         #10 ...((........)).(((((......)))))..((((........)))).......... -10.00    1   7.12
         11 ......((((......(((((......)))))......))))((((.....)))).....  -9.93    3   4.58
         12 ...((..(((((((....)))))..))..))...((((........))))..........  -9.82    1   4.11
         13 ......((.....)).(((((......)))))..((((........))))..........  -9.56   10   3.69
         14 ...((((.(((..((.(((((......)))))..))..)))...))))............  -9.55    3   5.62
         15 ((((.((......((((((((..(((.......)))..)))))..)))...)).))))..  -9.48    9   3.33
         16 .(((..((.....))...))).....(((((...((((........))))...)))))..  -9.36    1   4.19
         17 ...((........))...........(((((...((((........))))...)))))..  -9.30    1   4.08
         18 ....(((.(.((((....))))).)))..(((...(((........))))))........  -9.22    1   3.92
         19 ....(((.((.(((....))))).)))..(((...(((........))))))........  -9.22   18   3.11
         20 .......(((((((....)))))..))((((...((((........))))...))))...  -9.08    1   3.14
         21 ......(((....((((((((......)))).......))))...)))............  -9.08    8   7.11
         22 ....(((.(.((((....))))).)))..((((.((((........))))......))))  -9.06    1   5.34
         23 ....(((.((.(((....))))).)))..((((.((((........))))......))))  -9.06   22   3.11
         24 ....(((.(.((((....))))).)))..(((((............)).)))........  -8.91    1   3.87
         25 ....(((.((.(((....))))).)))..(((((............)).)))........  -8.91   24   3.11
         26 ......(((....(((((((((........))).))..))))...)))............  -8.86    8   4.76
         27 ...(((((.....)).(((((..(((.......)))..)))))..)))............  -8.77    9   5.51
         28 .......(((((((....)))))..))..((((.((.((.(((....))).)))).))))  -8.70    6   3.19
         29 ...(((((((...((((.((.....)).)).).)....))))...)))............  -8.57    3   5.16
         30 .........(((((....))))).(((((.....((((........))))....))))).  -8.50    1   4.19
        """

        # Input structures for debugging ...
        is1 = '....(((.(.((((....))))).)))((((...((((........))))...))))...'
        is2 = '....(((.((.(((....))))).)))((((...((((........))))...))))...'
        is3 = '...(((((((......(((((......)))))......))))...)))............'
        is4 = '....(((.(.((((....))))).))).......((((........))))..........'
        is5 = '....(((.((.(((....))))).))).......((((........))))..........'
        is6 = '....(((.(.((((....))))).)))..((((.((.((.(((....))).)))).))))'
        is7 = '....(((.((.(((....))))).)))..((((.((.((.(((....))).)))).))))'
        is8 = '......(((...(.((((((((........))).))).)).)...)))............'
        is9 = '.............((((((((..(((.......)))..)))))..)))............'
        is10= '...((........)).(((((......)))))..((((........))))..........'

        vrna_md = RNA.md()
        vrna_md.temperature = 25
        lmins = parse_barriers(btree, is_file = False, return_tuple = True)
        seq = lmins[0]

        RL = PrimePathLandscape(seq, vrna_md)
        RL.minh = 3
        print()

        # Construct the state-space as PrimePathLandscape graph:
        for lm in lmins[1:]: 
            RL.addnode(lm.structure, structure = lm.structure, energy = lm.energy)

        nn, bn = RL.connect_nodes_n2(energyth = -10)
        print('Graph size: {}, new: {}, better: {}'.format(len(RL), len(nn), len(bn)))

        lr, hn = RL.coarse_grain()
        print('Hidden nodes: {}, Lmins: {}'.format(len(lr), len(hn)))

        self.plot_active_subgraph(RL, 'normal')

        lim = 99
        while bn:
            nn, bn = RL.connect_nodes_n2(nodes = RL.active_nodes)
            print('Graph size: {}, new: {}, better: {}'.format(len(RL), len(nn), len(bn)))
            lr, hn = RL.coarse_grain()
            print('Hidden nodes: {}, Lmins: {}'.format(len(lr), len(hn)))
            lim -= 1
            if not lim: break

        self.plot_active_subgraph(RL, 'big')

        islist = [x for x in [is1, is2, is3, is4, is5, is6, is7, is8, is9, is10] if RL.has_node(x)]
        RL.minimal_prime_path_graph(nodes = islist)
        self.plot_active_subgraph(RL, 'mini')

    def plot_active_subgraph(self, RL, name = 'test', form = 'pdf'):
        ARL = RL.active_subgraph
        print('Active subgraph size: {}'.format(len(ARL)))
        for n in ARL.sorted_nodes():
            print('{} {:6.2f} {:4d}'.format(n, ARL.nodes[n]['energy'], ARL.nodes[n]['identity']))

        grfile = f"{name}_graph.{form}"
        plt.subplot(111)
        labs = {a : b['identity'] for a, b in ARL.nodes(data = True)}
        nx.draw_circular(ARL, with_labels = True, labels = labs)
        plt.savefig(grfile)
        plt.close()
        print('# Printed file:', grfile)


if __name__ == '__main__':
    unittest.main()
